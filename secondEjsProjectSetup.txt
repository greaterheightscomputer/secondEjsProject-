Backend Technology
- Node js (backend)

Database Technology
Mongodb 

Backend Packages or Third Party Libraries
- Express Js (framework based on Nodejs)
- Mongoose (Object Data Modeling (ODM) library)
- EJS (Embedded Javascript Templating Engine)
- Multer (image Uploading)
- Express session (Storing Session Messages)
- Dotenv (For loading Enironment variables from .env file)
- Nodemon (Monitoring the backend server)

Frontend libraries
- Bootstrap 5 (Styling)
- Datatable (pagination, sorting, etc)
- Fontawesome (icons)

Deployment
- Deploy the source code the Github
- Deploy the app to Cyclic cloud hosting service

Let start coding 
- open secondEjsProject10012023 inside vscode
- let check node version like this
C:\ComputerD\js-bootcamp-ejs07012023\secondEjsProject10012023> node --version
its return v14.18.1 else install nodejs at nodejs.org/en/
- let generate package.json file becos its a node app and we shall manage the third party libraries like this
C:\ComputerD\js-bootcamp-ejs07012023\secondEjsProject10012023> npm init 
- inside the generate package.json file let change the entry point from index.js to main.js

- let install these packages like this
C:\ComputerD\js-bootcamp-ejs07012023\secondEjsProject10012023> npm i ejs@3.1.6 multer@1.4.4-lts.1 dotenv@8.2.0 express-session@1.17.1 express@4.17.1 mongoose@5.11.15
- let install nodemon for development purpose only like this 
C:\ComputerD\js-bootcamp-ejs07012023\secondEjsProject10012023> npm i -D nodemon@2.0.20
- note that as we are installing all the packages for the app, its will generate node_modules folder to store all the setup of the dependencies we have installed.

- create main.js file to setup the backend server in the root folder
- create .env file in the root folder to setup the environment variables
setup the .env file
- use nodemon inside scripts object in the package.json from 
"scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
to this
"scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node app.js",
    "dev": "nodemon app.js"
  },

- let setup main.js file with basic structure of server 
- let setup the backend server like this
C:\ComputerD\js-bootcamp-ejs07012023\secondEjsProject10012023> npm start
- let click on the localhost url Server started at http://localhost:5000
its render Hello world on the browser which means our server is working fine.

Setup Mongodb
- by going to mongodb.com, click on Products tab, click on Community Server to install mongodb locally
- click on Compass for mongodb GUI
- after install the mongodb, click on the installed MongoDB Compass, click on Connect button, click on Databases tab, click on Create database to create db
* Database Name: node_crud
* Collection Name: users 
* click on Create Database button
- add url of local mongodb onto .env file 
- setup the mongoose connection inside the main.js file
- let view the connected to database on the terminal 

- let add middlewares 
- create routes folder inside the root folder 
- create routes.js file inside routes folder to write all the routes or apis
- create models folder in the root folder, it will content the ODM (Object Data Modelling) 
- create users.js file inside models folder to describe the structure of our mongodb
- let setup models/users.js file
- let setup routes/routes.js file like this first 
const express = require('express');
const router = express.Router();

router.get('/', (req, res) => {
  res.send('Home Page');
});

module.exports = router;

- remove this api from main.js backend server 
 app.get('/', (req, res) => {
  res.send('Hello world');
});
- replace the above api with route prefix by using routes/routes.js main.js backend server like this 
app.use('', router);
- import the above like this 
const router = require('./routes/routes');
- let test the app on the browser

- create views folder in the root folder to store all our ejs files
- create index.ejs file inside views folder
- let setup views/index.ejs file 

- inorder to view index.ejs on the browser let replace the api inside routes/routes.js from this 
router.get('/', (req, res) => {
  res.send('Home Page!');
});
with this
router.get('/', (req, res) => {
  res.render('index', { title: 'Home Page' });
});
- let refresh our browser content to view the content of index.ejs 

- google search cdnjs.com, click on cdnjs - The #1 free and open source CDN built to make life ...
search for bootstrap, click on twitter-bootstrap
- copy this link tag 
https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.2.3/css/bootstrap.min.css
- past it right after the title tags
- copy this link tag 
https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.2.3/js/bootstrap.bundle.min.js
- past it right before the closing body tags

- still on cdnjs website search for font, font-awesome
- copy this link tags 
https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css
- past it right after the twitter-bootstrap link
- let write the content inside the body tags of index.ejs file
- after adding font-awesome link at the head tag, google search font awesome icons, click on Font Awesome Icons, type the name of the icon you want then click on the icon, scroll down to copy the icon
- create a layout folder inside views folder 
- create header.ejs and footer.ejs file inside views/layout folder
- let cut the tags inside index.ejs file from <!DOCTYPE html> to </nav> onto views/layout/header.ejs file 
- cut from opening script tags to closing tags of </html> from index.ejs to footer.ejs then save.
- let use both header.ejs and footer.ejs inside index.ejs file like this 
<%- include('layout/header') %> 
<%- include('layout/footer') %>
- let add more content in between the header and footer layout in index.ejs

- let create another route or api inside routes/routes.js file like this 
router.get('/add', (req, res) => {
  res.render('add_users', { title: 'Add Users' });
});
- let create add_users.ejs file insde views folder 
- copy the current content of index.ejs file onto add_users.ejs file 
- let refresh the browser the view the updated content
- add more tags onto add_users.ejs file 
- let refresh the browser the view the updated content

- import models/user.js file inside routes/routes.js like this
const User = require('../models/users');
- import multer to upload images for the app like this 
const multer = require('multer');
- create uploads folder in the root folder inorder to store the images uploaded
- let write the code for uploading images right before router.get('/', (req, res) => {} like this
var storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, './public/uploads');
  },
  filename: function (req, file, cb) {
    cb(null, file.fieldname + '_' + Date.now() + '_' + file.originalname);
  },
});

//middleware
var upload = multer({
  storage: storage,
}).single('image');

- let create api or route to insert data onto mongodb by using router.post() api inside routes.routes.js right after var upload = multer({}) like this 
router.post('/add', upload, (req, res) => {
  const user = new User({
    name: req.body.name,
    email: req.body.email,
    phone: req.body.phone,
    image: req.file.filename,
  });
  user.save((err) => {
    if (err) {
      res.json({ message: err.message, type: 'danger' });
    } else {
      req.session.message = {
        type: 'success',
        message: 'User added successfully!',
      };
      res.redirect('/');
    }
  });
});
- let test the /add route on Add User Page to see if our interface is working with the api and inserting onto mongodb
- once you click on submit button its redirect user to Home page
- let check the local mongodb to view our record inserted 
- let create public folder then create nested uploads folder in the root folder to view the picture image uploaded 
- next is to display the success message on index.ejs when data is inserted onto mongodb right after the <div class="col-lg-12"> like this

<!--message is coming from req.session.message object in routes.js-->
   <% if(message){ %>
<!--<%= message.type %> means render the color dynamic beco's the color may danger which red 	or succss which is green-->
      <div
        class="alert alert-dismissible fade show alert-<%= message.type %>"
        role="alert"
      >
        <button
          class="btn-close"
          type="button"
          data-bs-dismiss="alert"
          aria-label="Close"
        ></button>
        <strong><%= message.message %></strong>
      </div>
    <% } %>
- let test if the message is rendering correctly onto index.ejs file

- next is to get data from the mongodb and render on the index.ejs 
let replace this 
router.get('/', (req, res) => {
  res.render('index', { title: 'Home Page' });
});
with this 
router.get('/', (req, res) => {
  User.find().exec((err, users) => {
    if (err) {
      res.json({ message: err.message });
    } else {
      res.render('index', {
        title: 'Home Page',
        users: users,
      });
    }
  });
});

- let use the users record from the db on index.ejs file and replace the static user data with dynamic content
- add ejs if then else statement right after <div class="table-responsive"> to render the user data from db
* cut the content of table tags and past it inside the if body statement
* code No users found in the database in the else block
* let use forEach() array method inside <tbody></tbody> to render users record dynamically by first cut the static user record in <tr></tr> tags and then past its inside the callback function inside forEach array method 
- let refresh our browser, its will not render image 
- let fix the above issue by adding 
app.use(express.static('uploads'));

- let add data table for pagination and sorting by google search datatables.net, click on Download, click on Bootstrap 4
* scroll down to Step 3. Pick a download method
* copy this 
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/v/bs4/dt-1.13.1/datatables.min.css"/>
* open views/layout/header.ejs file and past it inside the head tags
* copy the script tags 
<script type="text/javascript" src="https://cdn.datatables.net/v/bs4/dt-1.13.1/datatables.min.js"></script>
* open views/layout/footer.ejs file and past it inside the foot tags

- we also need jquery to initialize the datatable by
* google search cdnjs.com
* search for jquery
* click on jquery
* click on Copy Script Tag of this link https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.3/jquery.min.js 
* past it on the top of views/layout/footer.ejs file
* add another script tags right before </body> which is 
<script>
      $(document).ready(function(){
        $("table").DataTable({
          order:[0, 'desc']
        });
      });
    </script>
- let refresh the browser to view the new content

- create edit_users.ejs inside views folder
- copy the content of add_users.ejs onto edit_users.ejs 
- change the content of edit_users.ejs
- let change the action attribute of form tags from this 
	<form
            action="/add"
            method="post"
            id="add-form"
            enctype="multipart/form-data"
          >
	to this 
	<form
            action="/update/<%= user._id %>"
            method="post"
            id="add-form"
            enctype="multipart/form-data"
          >
- let add value attribute to all the input field inorder to display the fetch value from mongodb like this 
	value="<%= user.name %>"
- let add img tag inside the div that hold image detail like this
	  <img
              src="<%= user.image %>"
                width="150"
                class="img-thumbnail mt-1"
              />
- add another input field right before the update button like this 
<input type="hidden" name="old_image" value="<%= user.image %>" />
- change the button to Update User and change the class selector to btn-success
- change this <div class="card-header bg-primary"> to <div class="card-header bg-success">

- create edit user route or api inside routes.js file inorder to be able to edit user record inside the mongodb
- let test when we click on edit icon on index.ejs may be its will return Edit User Page with all the user record from mongodb

- next is to create api or route inside routes.js file to update the fetched user record from the db when user click on Update User button in Edit User Page
- let test if the updated button is updating user record 
- remove required attribute from image input inside edit_users.ejs inorder to allow us to update without changing image.

- next is to create api or route inside routes.js file inorder to delete user from the mongodb by click on delete icon inside index.ejs file
- let refresh the browser then delete any user record to see that the delete button is working.
- let check the db to view the list of current record 

- let change the local mongodb to cloud based mongodb called Atlas  
* google search https://www.mongodb.com/
* for new user click on Try Free button and for existing user Sign in 
- click on the current project on the menubar 
- click on + New Project
- Name Your Project: nodeEjsProject
- click on Next button
- click on Create Project
- click on Buid a Database
- click on Create Free Plan
- click on Create Cluster button
- How would you like to authenticate your connection?
* Username: nodeEjs
* Password: nodeEjs
* click on Create User button
- click on Network Access 
* click on Add IP Address button
* click on ALLOW ACCESS FROM ANYWHERE button
* click on Confirm button
- click Atlas logo
- click on nodeEjsProject
* click on connect button 
* click on connect your application
* Driver: Node.js 	Version: 2.2.12 or later 
* let copy the monogdb url 
- let go back to our project inorder to replace the local mongodb to atlas mongodb url
* inside the <password> to the password you use in mongodb

- let stop and start server to know if our connect to mongodb Atlas is working well
- click on this url Server started at http://localhost:5000 
- its return No users found in the database! 
- let add user record by clicking on Add User tab
- back to Atlas mongodb.com to click on Browse Collections button to view you database with your collection

- let add .gitignore file to remove node_modules folder onto github

- Deploy app to github
* C:\ComputerD\js-bootcamp-ejs07012023\secondEjsProject10012023> git init
* C:\ComputerD\js-bootcamp-ejs07012023\secondEjsProject10012023> git add .
* C:\ComputerD\js-bootcamp-ejs07012023\secondEjsProject10012023> git commit -m "Second ejs project"
- create your remote repository "secondEjsProject"
* C:\ComputerD\js-bootcamp-ejs07012023\secondEjsProject10012023>git remote add origin https://github.com/greaterheightscomputer/secondEjsProject.git
* C:\ComputerD\js-bootcamp-ejs07012023\secondEjsProject10012023> git push -u origin main
- here is github url:-> https://github.com/greaterheightscomputer/secondEjsProject.git

- Deploy app to cyclic 
- let sigin
- click on Deploy button
- click Link Your Own
- search for repository secondEjsProject 
- expand Advanced 
- change Node to Node 14.20.0
- click on Approve and install
- your app deploy successful
- Environment Variables 
* click on enfironment variables console
* add your mongodb atlas url 
* delete every other enviroment variable that is setup by you.
* click on Save
- click Deployments 
* click on Re-deloy icon
https://itchy-worm-leather-jacket.cyclic.app






